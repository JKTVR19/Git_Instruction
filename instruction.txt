tИсточники, учебники:
http://www.8host.com/blog/kratkij-spravochnik-po-git/
https://git-scm.com/book/ru/v2
https://githowto.com/ru

Необходимые команды git
1. Создание локального репозитория
	git init
2. Проверка состояния репозитория
	git status
	
	------ РАБОТА С ФАЙЛАМИ В ПАПКЕ РЕПОЗИТОРИЯ-------
3. Добавление файлов в репозиторий
	git add .
4. Удаление ошибочно добавленых в гит файлов
	git reset HEAD fileName
5. Создание файла .gitignore
	touch .gitignore
6. Запись в .gitignore игнорируемых гит файлов и директорий
	echo "fileName" >> .gitignore,
	echo "/FolderName >> .gitignore
	
7. Добавление изменений в репозиторий
	git add .
8. Создание слепка состояния файлов в репозитории.
	(обязательно проверить чтобы все файлы были зеленые)
	git commit -m "подробное описание выполненных работ"
9. Создание репозитория на github.com с именем репозитория локального
10. Связывание удаленного репозитория и локального
	git remote add origin https://github.com/<youlogin>/<youreponame.git>
11. Как узанать с каким удаленным репозиторием связан локальный.
	git remote -v
12. Как удалить связь с удаленным репозиторием
	git remote rm origin 
13. Как отправить файлы и их изменения на удаленный репозиторий
	git push -u origin master
14. Как вытянуть изменения с удаленного репозитория в локальный
	git pull origin master
15. Как сделать клон ветки удаленного репозитория?
	git fetch origin nameBranch
	git checkout -b nameBranch origin/nameBranch

	------ РАБОТА С КОММИТАМИ --------
	
16. Список коммитов:
	git log - история коммитов.
	q - выход из истории коммитов.
17. Переход к коммиту:
	git checkout <хэш коммита>
17. Создание ветки с кодом коммита
	git checkout -b myBranch <хэш коммита>

=========================================================================
=========================================================================
	----------ВЫЗОВ Notepad++ ДЛЯ commit-------------
после выполнения команды: 
00.	git config --global core.editor "'C:\\Programm Files\\Notepad++\\notepad++.exe' -multiInst -notabbar -nosession -noPlugin"
	в файле .gitconfig C\Users\Juri	появляется запись:
	[core]
		editor = 'C:\\Programm Files\\Notepad++\\notepad++.exe' -multiInst -notabbar -nosession -noPlugin
	что позволяет вместо коммита вызывать Notepad++ командой 
01.	git commit
=========================================================================
=========================================================================

	-----------ВЕТКИ--создать, посмотреть, перейти--------https://pingvinus.ru/git/category/branches
01.	git checkout -b new_f
		checkout -b - саздаёт новую ветку и переходит на неё.
		new_f - имя новой ветки.
02.	git branch 
		- посмотреть какие веткм существуют.(* - в какой ветке находимся)
03.	git branch -v
		- посмотреть какие последние коммит в ветках.
	git branch -r
		-Список удаленных веток
	
04.	git branch new_f2 
		-ветка создаётся но на неё не переключаемся.
05.	git checkout new_f2 
		-перход на ветку new_f2
	git branch -a
		-Для вывода всех веток, локальных и удаленных, используется ключ -a:

	-------Удаление ветки через консоль---------https://pingvinus.ru/git/1570

06.	git push origin --delete <branchName>
	 	удалить удалённую ветку, используя
		или
		git push origin :<branchName>

07.	git branch -d <branchName>
		Удаляет локальную ветку, если уже сделан её пуш и мердж:

08.	git branch -D <branchName>
		Принудительно (force) удаляет локальную ветку, несмотря ни на что:
	git push origin --delete <имя_ветки>
		удалить ветку из удаленного Git-репозитория.

	
	--------Переименование ветки (локально и удаленно)------Как переименовать ветку

09.	git branch -m old_branch new_branch 
		– переименовать локальную ветку
10.	git push origin :old_branch 
		– удалить старую ветку
11.	git push --set-upstream origin new_branch 
		– выгрузить новую ветку и «закрепить» ее за локальной веткой
	
	--------залить новую локальную ветку в удаленный репозитарий-----------------------------

12.	git checkout -b new_f
		-создали новую ветку new_f в локальном репозитории.
13.	git push --set-upstream origin new_f
		-публикации в удаленном репозитарии
		-Или, что то же самое, но с сокращенным именем опции:
14. 	git push -u origin new_f
	---------------------------------------------------------------------------------
		fatal: The current branch saveToBase2 has no upstream branch.
		To push the current branch and set the remote as upstream, use

15.    	git push --set-upstream origin saveToBase2

	----------------объединение веток--------------------
16.	git checkout master
	git merge hotfix
	
	-------------------------Просмотр истории коммитов  git log-------------------------------
	---https://ru.hexlet.io/courses/git_base/lessons/introduction_to_git_log/theory_unit------

17.	git log --stat
		получить некоторую краткую статистику по каждому коммиту

18.	git log --pretty=oneline
		--pretty - позволяет изменить формат вывода лога(в справке по команде)
		  oneline - выводит каждый коммит в одну строку.
		  short, full, и fuller, - практически не меняя формат вывода, позволяют выводить меньше или больше деталей соответственно:
		  format - позволяет вам полностью создать собственный формат вывода лога.
		    EX:	($ git log --pretty=format:"%h - %an, %ar : %s"
			cee7bab - Andrew Kumanyaev, 5 months ago : Bump version
			b6783a0 - Andrew Kumanyaev, 5 months ago : Update Readme
			0a2ef97 - Andrew Kumanyaev, 5 months ago : Do not replace params
			6746329 - Andrey Kumanyaev, 1 year, 1 month ago : Update gem vers)

	список наиболее полезных, или популярных, параметров формата.
Параметр    Описание выводимых данных
%H          Хеш коммита
%h          Сокращённый хеш коммита
%T          Хеш дерева
%t          Сокращённый хеш дерева
%P          Хеши родительских коммитов
%p          Сокращённые хеши родительских коммитов
%an         Имя автора
%ae         Электронная почта автора
%ad         Дата автора (формат соответствует параметру `--date=`)
%ar         Дата автора, относительная (пр. "2 мес. назад")
%cn         Имя коммитера
%ce         Электронная почта коммитера
%cd         Дата коммитера
%cr         Дата коммитера, относительная
%s          Комментарий

19	$ git log --pretty=format:"%ad %h %s" --graph
		Опция --graph добавляет ASCII-граф, показывающий историю ветвлений и слияний.
	